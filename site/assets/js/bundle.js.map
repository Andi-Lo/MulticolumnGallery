{"version":3,"names":[],"mappings":"","sources":["bundle.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\r\n * Multicolumn image gallery by Andreas Lorer\r\n * http://andreaslorer.de\r\n * \r\n * GNU General Public License, version 2\r\n * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\r\n *\r\n * Examples and documentation available on the project homepage\r\n * http://andi-lo.github.io/MulticolumnGallery/\r\n * \r\n */\r\n\r\n\r\n// require modules via browserify's 'require' statement\r\nvar columnBuilder = require('./ColumnBuilder');\r\nvar resizeController = require('./ResizeController');\r\nvar scrollController = require('./ScrollController');\r\n\r\n// some pseudo constants for better reading\r\nvar REQUEST_PENDING = 2;\r\nvar REQUEST_SUCCESS = 4;\r\n\r\n// the ajax data request result object\r\nvar requestResult;\r\n\r\n// static property\r\nvar galleryController = (function() {\r\n  var galleryController = ''; // This is the private persistent value\r\n   return function() { return galleryController; }; \r\n})(); // Invoke the outer function after defining it.\r\n\r\n\r\n// static property\r\nvar colBuilder = (function() {\r\n  var colBuilder = ''; // This is the private persistent value\r\n   return function() { return colBuilder; };\r\n})(); // Invoke the outer function after defining it.\r\n\r\n\r\n// this is the js entry point. After loading the dom, get startet to request the gallery.php file\r\nwindow.addEventListener('DOMContentLoaded', function(){\r\n  var gal = new GalleryFactory();\r\n  gal.requestGallery();\r\n\r\n}, false);\r\n\r\n/**\r\n * After the ajax request success, create controller instances and add event listeners to the document\r\n */\r\nvar addControllers = function (){\r\n  var scrlCtrl = new scrollController(requestResult, colBuilder);\r\n  var resizeCtrl = new resizeController(requestResult, colBuilder);\r\n  galleryController = {'scrlCtrl': scrlCtrl, 'resizeCtrl': resizeCtrl};\r\n\r\n  resizeCtrl.setController(galleryController);\r\n  scrlCtrl.setController(galleryController);\r\n\r\n  window.addEventListener('scroll', scrollWrapper, false);\r\n  window.addEventListener('resize', updateWidth, false);\r\n  window.addEventListener('resize', resizeWrapper, false);\r\n  return galleryController;\r\n};\r\n\r\nvar scrollWrapper = function() {\r\n  galleryController.scrlCtrl.handleScroll(colBuilder, galleryController, requestResult);\r\n};\r\n\r\nvar resizeWrapper = function() {\r\n  galleryController.resizeCtrl.handleResize(colBuilder, galleryController, requestResult);\r\n};\r\n\r\nvar updateWidth = function() {\r\n  galleryController.scrlCtrl.updateWidth(galleryController);\r\n};\r\n\r\n/**\r\n * Gallery Factory for creating gallery Objects\r\n * Makes the Ajax server request to get the gallery.php file\r\n */\r\nvar GalleryFactory = function () {\r\n  'use strict';\r\n\r\n  this.hasColumns = -1;\r\n  this.columns = 0;\r\n  this.names = \"\";\r\n  this.resize = \"\";\r\n  this.fadeIn = \"\";\r\n  this.columnHeight = \"\";\r\n  this.galleryHeight = 0;\r\n  this.gallery = document.getElementById('gallery');\r\n  this.galleryWidth = gallery.offsetWidth;\r\n  this.galleryHeight = gallery.offsetHeight;\r\n  this.windowWidth = window.innerWidth;\r\n  this.windowHeight = window.innerHeight;\r\n  this.sData = {\r\n                'width': this.windowWidth,\r\n                'galleryWidth': this.galleryWidth\r\n               };\r\n\r\n  /**\r\n   * urlEncodes an object to send it via post\r\n   * @param  {Object} object Object with key value pairs\r\n   * @return {String}        string in format key=value&foo=bar\r\n   */\r\n  var urlEncode = function (object) {\r\n    var encodedString = '';\r\n    for (var prop in object) {\r\n      if (object.hasOwnProperty(prop)) {\r\n        if (encodedString.length > 0) {\r\n            encodedString += '&';\r\n        }\r\n        encodedString += encodeURI(prop + '=' + object[prop]);\r\n      }\r\n    }\r\n    return encodedString;\r\n  };\r\n\r\n  /**\r\n   * Sends an Ajax request to the server and recieves the gallery\r\n   * @return {boolean}     true on success false on failure\r\n   */\r\n  this.requestGallery = function() {\r\n    var request = new XMLHttpRequest();\r\n    request.open('POST', 'php/Gallery.php', true);\r\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\r\n\r\n    // check ajax requests states and show a spinner while request is pending\r\n    request.onreadystatechange = function(){\r\n      switch(request.readyState) {\r\n        case REQUEST_PENDING:\r\n          console.log('pending');\r\n          document.getElementsByClassName('ajax-loading')[0].style.display = 'block';\r\n          break;\r\n        case REQUEST_SUCCESS:\r\n          console.log('success');\r\n          document.getElementsByClassName('ajax-loading')[0].style.display = 'none';\r\n      }\r\n    };\r\n\r\n    // handles the ajax onload event\r\n    request.onload = function() {\r\n\r\n      if (request.status >= 200 && request.status < 400) {\r\n\r\n        /* Success! */\r\n        var data = JSON.parse(request.responseText);\r\n        console.log(data);\r\n        requestResult = data;\r\n        colBuilder = new columnBuilder.ColumnBuilder(requestResult);\r\n        this.columns = data.numOfColumns;\r\n        this.queries = data.mediaQueries;\r\n        this.names = data.columnNames;\r\n        this.resize = data.resize;\r\n        this.fadeIn = data.fadeIn;\r\n        this.columnHeight = data.columnHeight;\r\n        this.activeColumn = data.activeColumn +\"_Columns\";\r\n        this.galleryHeight = data.galleryHeight;\r\n\r\n        var controller = addControllers();\r\n        \r\n        for (var i = 0; i < this.columns; i++) {\r\n          if(i === 0){\r\n            colBuilder.buildColumn(this.names[i], requestResult);\r\n            controller.scrlCtrl.refreshScreen(controller.scrlCtrl);\r\n          }else{\r\n            if(window.innerWidth >= this.queries[i]){\r\n              colBuilder.buildColumn(this.activeColumn, requestResult);\r\n              controller.scrlCtrl.refreshScreen(controller.scrlCtrl);\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      } else {\r\n        /* We reached our target server, but it returned an error */\r\n        return false;\r\n      }\r\n    };\r\n\r\n    // ajax request failed\r\n    request.onerror = function() {\r\n      console.log(\"Ajax Error: \"+ err);\r\n      return false;\r\n    };\r\n\r\n    /* send ajax request to server */\r\n    request.send(urlEncode(this.sData));\r\n    return true;\r\n  };\r\n};\n},{\"./ColumnBuilder\":2,\"./ResizeController\":3,\"./ScrollController\":4}],2:[function(require,module,exports){\n/*\r\n * Multicolumn image gallery by Andreas Lorer\r\n * http://andreaslorer.de\r\n *\r\n * GNU General Public License, version 2\r\n * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\r\n *\r\n * Examples and documentation available on the project homepage\r\n * http://bithugger.github.io/MulticolumnGallery/\r\n *\r\n */\r\n\r\n/**\r\n * Build html columns out of the data gotten from the Ajax request\r\n * @param  {String} columnName    the columns name\r\n * @param  {object} requestResult an object containing the requests data\r\n * @method {int}    getTmpColumn()\r\n * @exports tmpColumn\r\n * @exports ColumnBuiler\r\n */\r\nvar ColumnBuilder = function () {\r\n  'use strict';\r\n\r\n  this.buildColumn = function (columnName, requestResult) {\r\n    var galleryHeight = requestResult.galleryHeight;\r\n    var tmp = columnName.split('_');\r\n    var columnNumber = parseInt(tmp[0], 10) - 1;\r\n    var gallery = document.getElementById('gallery');\r\n    var winHeight = window.innerHeight + window.pageYOffset;\r\n    var images = gallery.getElementsByClassName('mult-image');\r\n    var galleryPosY = gallery.getBoundingClientRect().top;\r\n\r\n    if (tmpColumn != columnNumber) {\r\n      tmpColumn = columnNumber;\r\n      gallery.setAttribute('style', 'height: '+ galleryHeight[columnNumber]+'px;');\r\n\r\n      if(images.length !== 0){\r\n        for (var i = images.length - 1; i >= 0; i--) {\r\n          images[i].remove();\r\n        }\r\n      }\r\n\r\n      requestResult[columnName].forEach(function(image, i){\r\n        if (typeof image == 'object' && image !== null) {\r\n          var elem;\r\n          // console.log('img pos ' + (image.posY + galleryPosY) + ' wh: ' + (winHeight+300));\r\n          /* image position is in the users screensize -> image is visible */\r\n          if (image.posY <= winHeight && galleryPosY <= winHeight){\r\n            elem = buildImageElement(image, 'visible');\r\n            gallery.appendChild(elem);    \r\n          }\r\n          else if ((image.posY + galleryPosY) <= winHeight + 200) {\r\n            // console.log('img pos ' + (image.posY + galleryPosY) + ' wh: ' + (winHeight+200));\r\n            elem = buildImageElement(image, 'hidden');\r\n            gallery.appendChild(elem);\r\n          }\r\n        } else\r\n          return false;\r\n      });\r\n      return true;\r\n    }\r\n  };\r\n\r\n  var buildImageElement = function (image, visiblity) {\r\n    var outerImg = document.createElement('a');\r\n    var innerImg = document.createElement('img');\r\n    var opacity = visiblity == 'visible' ? 1 : 0;\r\n\r\n    outerImg.setAttribute('class', 'mult-image');\r\n    outerImg.setAttribute('href', image.imgPath);\r\n    outerImg.setAttribute('title', image.imgName);\r\n\r\n    innerImg.setAttribute('class', \"mult-image-inner\");\r\n    innerImg.setAttribute('style', 'position:absolute; top:' + image.posY + 'px; left:' + image.posX + 'px; width:' + image.width + 'px; height:' + image.height  + 'px; visibility:' + visiblity + '; ' + 'opacity: ' + opacity + ';');\r\n    innerImg.setAttribute('src',  image.thumbPath);\r\n    innerImg.setAttribute('alt', image.imgName);\r\n    innerImg.setAttribute('width', image.width);\r\n    innerImg.setAttribute('height', image.height);\r\n\r\n    outerImg.appendChild(innerImg);\r\n    return outerImg;\r\n  };\r\n\r\n  this.addImgToColumn = function (columnName, scrollPos, requestResult) {\r\n    var elem = \"\";\r\n    var gallery = document.getElementById('gallery');\r\n    var galleryPosY = gallery.getBoundingClientRect().top;\r\n    var activeColumn = requestResult.activeColumn;\r\n\r\n    requestResult[columnName].forEach(function(image, i){\r\n      if (typeof image == 'object' && image !== null) {\r\n        // console.log(image.id + ' ' + imgId + ' ' +  (image.id - imgId));\r\n        if (image.id > imgId && (image.id - imgId <= 1)) {\r\n          // image gets loaded but is hidden till user scrolls there\r\n          if (activeColumn == \"1_Columns\" && (image.posY + galleryPosY) <= scrollPos + 500) {\r\n            elem = buildImageElement(image, 'hidden');\r\n            gallery.appendChild(elem);\r\n            imgId = image.id;\r\n          } else if ((image.posY + galleryPosY) <= scrollPos + 200) {\r\n            elem = buildImageElement(image, 'hidden');\r\n            gallery.appendChild(elem);\r\n            imgId = image.id;\r\n          } else\r\n            return;\r\n        } else\r\n          return;\r\n      } else\r\n        return;\r\n    });\r\n\r\n    return true;\r\n  }; // end addImgToColumn\r\n};\r\n\r\nColumnBuilder.prototype.getTmpColumn = function() {\r\n  return tmpColumn;\r\n};\r\n\r\n// static varibles\r\n\r\nvar tmpColumn = (function() {\r\n   var tmpColumn = -1; // This is the private persistent value\r\n   // The outer function returns a nested function that has access\r\n   // to the persistent value.  It is this nested function we're storing\r\n   // in the variable uniqueID above.\r\n   return function() { return tmpColumn; };  // Return and increment\r\n})(); // Invoke the outer function after defining it.\r\n\r\nvar imgId = -1;\r\n\r\nmodule.exports.tmpColumn = tmpColumn;\r\nmodule.exports.ColumnBuilder = ColumnBuilder;\r\n\n},{}],3:[function(require,module,exports){\n/*\r\n * Multicolumn image gallery by Andreas Lorer\r\n * http://andreaslorer.de\r\n * \r\n * GNU General Public License, version 2\r\n * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\r\n *\r\n * Examples and documentation available on the project homepage\r\n * http://andi-lo.github.io/MulticolumnGallery/\r\n * \r\n */\r\n\r\n\r\n/**\r\n * Controller-Class for handling Resize events\r\n * @methods handleResize(ColumnBuilder, GalleryController, collection)\r\n * @exports ResizeController\r\n */\r\nvar ResizeController = function(requestResult, columnBuilder){\r\n  'use strict';\r\n\r\n  this.requestResult = requestResult;\r\n  this.winWidth = window.innerWidth;\r\n  this.winHeight = window.innerHeight;\r\n  this.names = requestResult.columnNames;\r\n  this.columns = requestResult.numOfColumns;\r\n  this.queries = requestResult.mediaQueries;\r\n  this.resize = requestResult.resize;\r\n  this.galleryCtrl = '';\r\n  this.columnBuilder = columnBuilder;\r\n  \r\n  this.getColumnBuilder = function() {\r\n    return this.columnBuilder;\r\n  };\r\n\r\n  this.getGalleryController = function(){\r\n    return this.galleryCtrl;\r\n  };\r\n\r\n};\r\n\r\nResizeController.prototype.setController = function(galleryCtrl){\r\n  this.galleryCtrl = galleryCtrl;\r\n};\r\n\r\n/**\r\n * Handler for the onresize event\r\n * @param  {ColumnBuilder} colBuilder         A Columnbuilder object \r\n * @param  {GalleryController} galleryCtrl    The galleryControler instance\r\n * @param  {Collection} requestResult         The Ajax request result data\r\n */\r\nResizeController.prototype.handleResize = function(colBuilder, galleryCtrl, requestResult) {\r\n  var resizeCtrl = galleryCtrl.resizeCtrl;\r\n  var scrlCtrl = galleryCtrl.scrlCtrl;\r\n  var names = requestResult.columnNames;\r\n  var columns = requestResult.numOfColumns;\r\n  var queries = requestResult.mediaQueries;\r\n  var resize = requestResult.resize;\r\n\r\n  /* if in config.json file \"resize\" is set to \"yes\" */\r\n  if(resize == 'yes'){\r\n    /* handle the first column (1) */\r\n    if(window.innerWidth <= queries[0]){\r\n      colBuilder.buildColumn(names[0], requestResult);\r\n      scrlCtrl.refreshScreen(scrlCtrl);\r\n      return;\r\n    } \r\n\r\n    /* handle the last column (n) */\r\n    else if(window.innerWidth >= queries[queries.length-1]){\r\n      colBuilder.buildColumn(names[columns-1], requestResult);\r\n      scrlCtrl.refreshScreen(scrlCtrl);\r\n      return;\r\n    }\r\n\r\n    /* handle columns between 2 and n-1 */\r\n    else if(window.innerWidth >= queries[0]){\r\n      for (var query = 0; query <= columns-1; query++){\r\n        if(window.innerWidth <= queries[query]){\r\n          colBuilder.buildColumn(names[query-1], requestResult);\r\n          scrlCtrl.refreshScreen(scrlCtrl);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = ResizeController;\r\n\n},{}],4:[function(require,module,exports){\n/**\r\n * Multicolumn image gallery by Andreas Lorer\r\n * http://andreaslorer.de\r\n * \r\n * GNU General Public License, version 2\r\n * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\r\n *\r\n * Examples and documentation available on the project homepage\r\n * http://andi-lo.github.io/MulticolumnGallery/\r\n * \r\n */\r\n\r\nvar scrollPosSave = 0;\r\n\r\n/**\r\n * Controller-Class to calculate, observe and manage if the picture visibility \r\n * has to be changed\r\n * @method handleScroll(ColumnBuilder, GalleryController, Collection)\r\n * @method ScrollController(collection, ColumnBuilder)  the constructor\r\n * @method setController(GalleryController)\r\n * @method GalleryController getGalleryController()\r\n * @method setColumnBuilder(ColumnBuilder)\r\n * @method updateWidth(GalleryController)\r\n */\r\nvar ScrollController = function(requestResult, columnBuilder) {\r\n  'use strict';\r\n\r\n  requestResult = requestResult;\r\n  this.scrollEvents = 0;\r\n  this.innerWinHeight = window.innerHeight;\r\n  this.scrollHeight = this.innerWinHeight;\r\n  this.winWidth = window.innerWidth;\r\n  this.timeoutId = 0;\r\n  this.names = requestResult.columnNames;\r\n  this.columnBuilder = columnBuilder;\r\n  this.galleryCtrl = '';\r\n\r\n  this.getColumnBuilder = function() {\r\n    return this.columnBuilder;\r\n  };\r\n\r\n  /**\r\n   * Animation function to animate a fade in effect on a given DOM element\r\n   * (note: this is the Javascript version of JQuery's $.animate)\r\n   * @param  {Element} el  A DOM element\r\n   */\r\n  this.fadeIn = function (el) {\r\n    el[0].style.opacity = 0;\r\n\r\n    var last = +new Date();\r\n    var tick = function() {\r\n      el[0].style.opacity = +el[0].style.opacity + (new Date() - last) / 400;\r\n      last = +new Date();\r\n\r\n      if (+el[0].style.opacity < 1) {\r\n        (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);\r\n      }\r\n    };\r\n    tick();\r\n  };\r\n\r\n  /**\r\n   * refreshes the users viewport when scrolling through the pictrues\r\n   * @param  {int}              offset    simulate a bigger viewport by increasing it by a number\r\n   * @param  {ScrollController} scrlCtrl  an instance of the ScrollController\r\n   */\r\n  this.refreshScreenOnScroll = function (offset, scrlCtrl) {\r\n    var fadeIn = requestResult.fadeIn;\r\n    var scrlPos = window.pageYOffset;\r\n\r\n    var images = document.getElementsByClassName('mult-image-inner');\r\n\r\n    for (var i = images.length - 1; i >= 0; i--) {\r\n      var style = window.getComputedStyle(images[i]),\r\n          cssTopValue = parseInt(style.getPropertyValue('top'), 10),\r\n          isHidden = images[i].style.visibility;\r\n\r\n      /* to see a Visual effect of unhiding a picture I use an offset of -100 */\r\n      /* != 'NaN' because css.('top') returns the 'top' value and 'auto', parsing 'auto' will return a value or 'NaN' */\r\n      var tmp = scrlPos - offset;\r\n      if(tmp <= cssTopValue && cssTopValue != 'NaN' && isHidden == 'hidden') {\r\n        console.log(tmp + ' <= ' + cssTopValue + ' ' + isHidden + ' == hidden');\r\n        images[i].style.visibility = 'visible';\r\n        if(fadeIn == 'yes'){\r\n          if(images[i].style.opacity < 1) {\r\n            scrlCtrl.fadeIn([images[i]]);\r\n          }\r\n        } \r\n        scrollPosSave = scrlPos;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * [refreshScreen description]\r\n   * @return {[type]} [description]\r\n   */\r\n  this.refreshScreen = function (scrlCtrl) {\r\n    var scrlPos = window.pageYOffset;\r\n    var images = document.getElementsByClassName('mult-image-inner');\r\n\r\n    for (var i = images.length - 1; i >= 0; i--) {\r\n      var style = window.getComputedStyle(images[i]);\r\n      var cssTopValue = parseInt(style.getPropertyValue('top'), 10);\r\n      /* to see a Visual effect of unhiding a picture I use an offset of -100px */\r\n      /* != 'NaN' because css.('top') returns the 'top' value and 'auto', parsing 'auto' will return a value or 'NaN' */\r\n      if(scrlPos >= cssTopValue && cssTopValue != 'NaN')\r\n      {\r\n        images[i].style.visibility = 'visible';\r\n        scrollPosSave = scrlPos;\r\n      }\r\n    }\r\n  };\r\n\r\n};\r\n\r\nScrollController.prototype.setController = function(galleryCtrl){\r\n  galleryCtrl = galleryCtrl;\r\n};\r\n\r\nScrollController.prototype.getGalleryController = function(){\r\n  return this.galleryCtrl;\r\n};\r\n\r\nScrollController.prototype.setColumnBuilder = function(columnBuilder) {\r\n  this.columnBuilder = columnBuilder;\r\n};\r\n\r\nScrollController.prototype.updateWidth = function(galleryController){\r\n  var scrlCtrl = galleryController.scrlCtrl;\r\n  scrlCtrl.winWidth = window.innerWidth;\r\n};\r\n\r\n/**\r\n * Handler for the onscroll event\r\n * @param  {ColumnBuilder}      columnBuilder  A columnBuilder object to build columns\r\n * @param  {GalleryController}  galleryCtrl    The galleryController which contains two instances: Scrollcontroller, ResizeController\r\n * @param  {Collection}         requestResult  Ajax request result data collection @see class Ajax\r\n */\r\nScrollController.prototype.handleScroll = function(columnBuilder, galleryCtrl, requestResult){\r\n  var scrlCtrl = galleryCtrl.scrlCtrl;\r\n  var newScrollPos = scrlCtrl.innerWinHeight + window.pageYOffset;\r\n\r\n  /* lazy loading: Adds images depending on the Users scrolling position */\r\n  if(newScrollPos > scrollPosSave){\r\n\r\n    if(window.innerWidth > 767){\r\n      scrlCtrl.refreshScreenOnScroll(0, scrlCtrl);\r\n    } \r\n    else{\r\n      if(window.innerWidth <= 768){\r\n        scrlCtrl.refreshScreenOnScroll(30, scrlCtrl);\r\n      }\r\n    }\r\n\r\n    if(scrlCtrl.timeoutId){\r\n      clearTimeout(scrlCtrl.timeoutId);\r\n    }\r\n\r\n    /* if the user scrolled down and not up && the user scrolled down more then 300 pixels*/\r\n    scrlCtrl.timeoutId = setTimeout(function(){\r\n      columnBuilder.addImgToColumn(scrlCtrl.names[columnBuilder.getTmpColumn()], newScrollPos, requestResult);\r\n      scrlCtrl.refreshScreenOnScroll(30, scrlCtrl);\r\n\r\n    }, 50);\r\n    // end timeout\r\n  } \r\n};\r\n\r\nvar requestResult = (function() {\r\n   var requestResult = ''; // This is the private persistent value\r\n   return function() { return requestResult; }; \r\n})(); // Invoke the outer function after defining it.\r\n\r\nmodule.exports = ScrollController;\n},{}]},{},[1]);\n"],"file":"bundle.js","sourceRoot":"/source/"}